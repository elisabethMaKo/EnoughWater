apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//apply plugin: 'jacoco'
//apply plugin: 'info.solidsoft.pitest'
apply plugin: 'pl.droidsonroids.pitest'
apply plugin: 'org.sonarqube'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.android.example.enoughwater"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled = true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android {
        packagingOptions {
            exclude 'META-INF/DEPENDENCIES'
            exclude 'META-INF/LICENSE'
            exclude 'META-INF/LICENSE.txt'
            exclude 'META-INF/license.txt'
            exclude 'META-INF/NOTICE'
            exclude 'META-INF/NOTICE.txt'
            exclude 'META-INF/notice.txt'
            exclude 'META-INF/ASL2.0'
            exclude("META-INF/*.kotlin_module")
        }
    }

    dataBinding {
        enabled = true
    }


}





//jacoco {
//    toolVersion "0.8.0"
//}

//task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
//
//        reports {
//            xml.enabled = true
//            html.enabled = true
//            html.destination file("${buildDir}/reports/coverage")
//        }
//
//        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
//        def mainSrc = "${project.projectDir}/src/main/java"
//
//        sourceDirectories.from = subprojects.sourceSets.main.allSource.srcDirs
//        additionalSourceDirs.from = subprojects.sourceSets.main.allSource.srcDirs
//        classDirectories.from = subprojects.sourceSets.main.output
//        executionData.from = subprojects.jacocoTestReport.executionData
//}

//pitest {
//    targetClasses = ['com.android.example.enoughwater.*']  //by default "${project.group}.*"
//    threads = 4
//    outputFormats = ['XML', 'HTML']
//    timestampedReports = false
//}

pitest {
    reportDir = 'build/pitest/reports'
    targetClasses = ['com.android.example.enoughwater.*']
    threads = 6
    outputFormats = ['HTML']
    timeoutConstInMillis = 20000
    verbose = true
}

sonarqube {
    properties {
        property "sonar.projectKey", "elisabethMaKo_EnoughWater"
        property "sonar.organization", "elisabethmako"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "kotlin"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.3'

    annotationProcessor 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    annotationProcessor 'org.glassfish.jaxb:jaxb-runtime:2.3.3'
    annotationProcessor 'javax.annotation:javax.annotation-api:1.3.2'
}



